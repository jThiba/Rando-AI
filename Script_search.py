import json

# Charger les randonn√©es structur√©es
with open("randonn√©es_auvergne_structur√©es.json", "r", encoding="utf-8") as f:
    randonn√©es = json.load(f)

def rechercher_randonn√©es(query, min_distance=0, max_distance=float("inf")):
    """Recherche des randonn√©es correspondant √† un mot-cl√© et une distance"""
    r√©sultats = []
    query = query.lower()
    
    for rando in randonn√©es:
        nom = rando["nom"].lower()
        distance = rando["distance_km"] or 0  # G√©rer le cas o√π la distance est None

        if query in nom and min_distance <= distance <= max_distance:
            r√©sultats.append(rando)

    return r√©sultats

# Exemple d'utilisation
query = input("üîç Entrez un mot-cl√© pour la randonn√©e : ")
min_dist = float(input("üìè Distance min (km) : ") or 0)
max_dist = float(input("üìè Distance max (km) : ") or float("inf"))

r√©sultats = rechercher_randonn√©es(query, min_dist, max_dist)

# Affichage des r√©sultats
if r√©sultats:
    print(f"\nüèûÔ∏è {len(r√©sultats)} randonn√©es trouv√©es :\n")
    for rando in r√©sultats:
        print(f"- {rando['nom']} ({rando['distance_km']} km)")
else:
    print("‚ùå Aucune randonn√©e trouv√©e.")
